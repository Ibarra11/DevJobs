/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CredentialsInputType: { // input type
    email: string; // String!
    password: string; // String!
    role: NexusGenEnums['role']; // role!
  }
}

export interface NexusGenEnums {
  role: "DEVELOPER" | "EMPLOYER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Job: { // root type
    apply: string; // String!
    company: string; // String!
    contract: string; // String!
    id: number; // Int!
    jobDescription: string; // String!
    jobRequirementContent: string; // String!
    jobRequirementList: string[]; // [String!]!
    jobRoleContent: string; // String!
    jobRoleList: string[]; // [String!]!
    location: string; // String!
    logoUrl: string; // String!
    position: string; // String!
    postedAt: string; // String!
    website: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    role: NexusGenEnums['role']; // role!
  }
  UsersJobs: { // root type
    appliedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    job?: NexusGenRootTypes['Job'] | null; // Job
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Job: { // field return type
    apply: string; // String!
    company: string; // String!
    contract: string; // String!
    id: number; // Int!
    jobDescription: string; // String!
    jobRequirementContent: string; // String!
    jobRequirementList: string[]; // [String!]!
    jobRoleContent: string; // String!
    jobRoleList: string[]; // [String!]!
    location: string; // String!
    logoUrl: string; // String!
    position: string; // String!
    postedAt: string; // String!
    website: string; // String!
  }
  Mutation: { // field return type
    addJobToUser: NexusGenRootTypes['User']; // User!
    addNewUser: NexusGenRootTypes['User']; // User!
    getUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    job: NexusGenRootTypes['Job'] | null; // Job
    jobs: NexusGenRootTypes['Job'][]; // [Job!]!
    me: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    appliedJobs: NexusGenRootTypes['UsersJobs'][]; // [UsersJobs!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    role: NexusGenEnums['role']; // role!
  }
  UsersJobs: { // field return type
    appliedAt: NexusGenScalars['DateTime'] | null; // DateTime
    job: NexusGenRootTypes['Job'] | null; // Job
  }
}

export interface NexusGenFieldTypeNames {
  Job: { // field return type name
    apply: 'String'
    company: 'String'
    contract: 'String'
    id: 'Int'
    jobDescription: 'String'
    jobRequirementContent: 'String'
    jobRequirementList: 'String'
    jobRoleContent: 'String'
    jobRoleList: 'String'
    location: 'String'
    logoUrl: 'String'
    position: 'String'
    postedAt: 'String'
    website: 'String'
  }
  Mutation: { // field return type name
    addJobToUser: 'User'
    addNewUser: 'User'
    getUser: 'User'
  }
  Query: { // field return type name
    job: 'Job'
    jobs: 'Job'
    me: 'User'
  }
  User: { // field return type name
    appliedJobs: 'UsersJobs'
    createdAt: 'DateTime'
    email: 'String'
    id: 'Int'
    role: 'role'
  }
  UsersJobs: { // field return type name
    appliedAt: 'DateTime'
    job: 'Job'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addJobToUser: { // args
      jobId: number; // Int!
      userId: number; // Int!
    }
    addNewUser: { // args
      input: NexusGenInputs['CredentialsInputType']; // CredentialsInputType!
    }
    getUser: { // args
      input: NexusGenInputs['CredentialsInputType']; // CredentialsInputType!
    }
  }
  Query: {
    job: { // args
      id: number; // Int!
    }
    me: { // args
      userId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}